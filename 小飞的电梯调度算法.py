#-*- coding: utf-8 -*-
"""
# 亚洲微软研究院所在的希格玛大厦一共有6部电梯。在高峰时间，每层都有人上下，电梯每层都停。实习生小飞常常会被每层都停的电梯弄的很不耐烦，
于是他提出了这样一个办法：由于楼层并不算太高，那么在繁忙的上下班时间，每次电梯从一层往上走时，我们只允许电梯停在其中的某一层。所有乘客从
一楼上电梯，到达某层后，电梯停下来，所有乘客再从这里爬楼梯到自己的目的层。在一楼的时候，每个乘客选择自己的目的层，电梯则计算出应停的楼层。
# 问：电梯停在哪一层楼，能够保证这次乘坐电梯的所有乘客爬楼梯的层数之和最少？

# 假设电梯停在i层楼，可以计算出所有乘客要爬楼层的层数为Y,假设此时有N1个乘客在i层楼以下，N2个乘客在I层楼，N3个乘客在I层楼以上，则当电梯停在i+1层的时候，
# N1+N2个乘客要多下一层楼，共多下N1+N2层，N3个乘客要少往上面爬一层楼，少上N3层楼，此时Y(i+1) = Y(i) + N1+N2-N3，很显然，当N1+N2<N3的时候，Y不断减小。
# Y1很容易算出来，另外我们还可以看出，N1+N2是递增的，N3是递减的，所以N1+N2一旦大于N3的时候，我们直接退出循环即可，没有必要再计算下去了。
"""
def min_floor(array,floor):
    for i in xrange(0,floor):
        N1 = 0  # 第i层以下的人
        N2 = 0  # 第i层的人
        N3 = 0  # 第i层以上的人
        Y = 0
        for j in array:
            if j > i:
                N1 += 1
            if j == i:
                N2 += 1
            if j < i:
                N3 += 1
            Y += abs(i-j)
        print Y #在第i层楼停的情况下, 总共要走的楼梯数
        if N1 + N2 < N3:
            return i

print min_floor([10,6,3,2,5,7,8,9,10], 11)


